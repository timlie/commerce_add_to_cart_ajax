<?php

/**
 * Implements hook_views_api().
 */
function commerce_add_to_cart_ajax_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_form_alter().
 *
 * If this is a Views Form (determined by $form_id) that contains this module's
 * quantity handler, remove the submit button.
 */
function commerce_add_to_cart_ajax_form_alter(&$form, &$form_state, $form_id) {
  $is_quantity_form = FALSE;
  if (strpos($form_id, 'views_form_') === 0) {
    $view = $form_state['build_info']['args'][0];
    foreach ($view->field as $field) {
      if ($field instanceof commerce_add_to_cart_ajax_handler_field_quantity) {
        $is_quantity_form = TRUE;
        break;
      }
    }
    // Allow form to work when embedded using views_embed_view(), or in a block.
    if (empty($view->override_path)) {
      if (!empty($view->preview) || $view->display_handler instanceof views_plugin_display_block) {
        $view->override_path = $_GET['q'];
        $query = drupal_get_query_parameters($_GET, array('q'));
        $form['#action'] = url($view->get_url(), array('query' => $query));
      }
    }
  }
  //dsm($form);
  //$form['add_to_cart_quantity_ajax'][0]['#ajax']['progress']['message'] = 'Toevoegen aan winkelwagen';

  if ($is_quantity_form) {
    //$form['actions']['submit']['#value'] = t('Add to cart');
    //TODO: add submit hiding code.
    unset($form['actions']);
  }
}

function commerce_add_to_cart_ajax_product_add($uid, $line_item, $override = TRUE) {
  // Do not add the line item if it doesn't have a unit price.
  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (is_null($line_item_wrapper->commerce_unit_price->value())) {
    return FALSE;
  }

  // First attempt to load the customer's shopping cart order.
  $order = commerce_cart_order_load($uid);

  // If no order existed, create one now.
  if (empty($order)) {
    $order = commerce_cart_order_new($uid);
    $order->data['last_cart_refresh'] = REQUEST_TIME;
  }

  // Set the incoming line item's order_id.
  $line_item->order_id = $order->order_id;

  // Wrap the order for easy access to field data.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

  // Extract the product and quantity we're adding from the incoming line item.
  $product = $line_item_wrapper->commerce_product->value();
  $quantity = $line_item->quantity;

  // Invoke the product prepare event with the shopping cart order.
  rules_invoke_all('commerce_cart_product_prepare', $order, $product, $line_item->quantity);

  // Determine if the product already exists on the order and increment its
  // quantity instead of adding a new line if it does.
  $matching_line_item = NULL;

  // If we are supposed to look for a line item to combine into...
  if ($override) {
    // Generate an array of properties and fields to compare.
    $comparison_properties = array('type', 'commerce_product');

    // Add any field that was exposed on the Add to Cart form to the array.
    // TODO: Bypass combination when an exposed field is no longer available but
    // the same base product is added to the cart.
    foreach (field_info_instances('commerce_line_item', $line_item->type) as $info) {
      if (!empty($info['commerce_cart_settings']['field_access'])) {
        $comparison_properties[] = $info['field_name'];
      }
    }

    // Allow other modules to specify what properties should be compared when
    // determining whether or not to combine line items.
    drupal_alter('commerce_cart_product_comparison_properties', $comparison_properties, clone($line_item));

    // Loop over each line item on the order.
    foreach ($order_wrapper->commerce_line_items as $delta => $matching_line_item_wrapper) {
      // Examine each of the comparison properties on the line item.
      foreach ($comparison_properties as $property) {
        // If the property is not present on either line item, bypass it.
        if (!isset($matching_line_item_wrapper->value()->{$property}) && !isset($line_item_wrapper->value()->{$property})) {
          continue;
        }

        // If any property does not match the same property on the incoming line
        // item or exists on one line item but not the other...
        if ((!isset($matching_line_item_wrapper->value()->{$property}) && isset($line_item_wrapper->value()->{$property})) ||
          (isset($matching_line_item_wrapper->value()->{$property}) && !isset($line_item_wrapper->value()->{$property})) ||
          $matching_line_item_wrapper->{$property}->raw() != $line_item_wrapper->{$property}->raw()) {
          // Continue the loop with the next line item.
          continue 2;
        }
      }

      // If every comparison line item matched, combine into this line item.
      $matching_line_item = $matching_line_item_wrapper->value();
      break;
    }
  }

  // If no matching line item was found...
  if (empty($matching_line_item)) {
    // Save the incoming line item now so we get its ID.
    commerce_line_item_save($line_item);

    // Add it to the order's line item reference value.
    $order_wrapper->commerce_line_items[] = $line_item;
  }
  else {
    // Increment the quantity of the matching line item, update the data array,
    // and save it.
    $matching_line_item->quantity = $quantity;
    $matching_line_item->data = array_merge($line_item->data, $matching_line_item->data);

    // If the quantity is 0 we remove the line item instead of adding it
    if ($matching_line_item->quantity == 0) {
      commerce_cart_order_product_line_item_delete($order, $matching_line_item->line_item_id, TRUE);
    }
    else {
      commerce_line_item_save($matching_line_item);
    }

    // Clear the line item cache so the updated quantity will be available to
    // the ensuing load instead of the original quantity as loaded above.
    entity_get_controller('commerce_line_item')->resetCache(array($matching_line_item->line_item_id));

    // Update the line item variable for use in the invocation and return value.
    $line_item = $matching_line_item;
  }

  // Save the updated order.
  commerce_order_save($order);

  if (!isset($matching_line_item->quantity)) {
    // Invoke the product add event with the newly saved or updated line item.
    rules_invoke_all('commerce_cart_product_add', $order, $product, $quantity, $line_item);
  }

  // Return the line item.
  return $line_item;
}

function commerce_add_to_cart_ajax_set_cart_quantity($form, $form_state){
  $validate = array(
    'flag' => FALSE,
    'warn' => FALSE,
  );
  global $user;
  $trigger = $form_state['triggering_element'];
  $product_id = $trigger['#product_id'];
  $field_name = $trigger['#field_name'];
  $row_id = $trigger['#row_num'];
  $product = commerce_product_load($product_id);
  $quantity = $form_state['values'][$field_name][$row_id];

  if (empty($quantity) || $quantity == "") {
    $quantity = 0;
    $validate['flag'] = TRUE;
  }
  elseif (!is_numeric($quantity)) {
    drupal_set_message('Quantity must be a non-negative whole number.', 'warning');
    $quantity = 0;
    $validate['flag'] = TRUE;
    $validate['warn'] = TRUE;
  }
  elseif ($quantity < 0) {
    drupal_set_message('Quantity must be non-negative.', 'warning');
    $quantity = 0;
    $validate['flag'] = TRUE;
    $validate['warn'] = TRUE;
  }
  elseif ((int) $quantity != $quantity) {
    drupal_set_message('Quantity must be a whole number', 'warning');
    $quantity = (int) $quantity;
    $validate['flag'] = TRUE;
    $validate['warn'] = TRUE;
  }

  $line_item = commerce_product_line_item_new($product, $quantity);

  commerce_add_to_cart_ajax_product_add($user->uid, $line_item, TRUE);

  $messages = theme('status_messages');
  $commands = array();
  if ($validate['flag']) {
    $commands[] = ajax_command_invoke('input[name="' . $trigger['#name'] . '"]', 'val', array($quantity));
  }
  if ($validate['warn']) {
    $commands[] = ajax_command_invoke('input[name="' . $trigger['#name'] . '"]', 'addClass', array('error'));
  }
  else {
    $commands[] = ajax_command_invoke('input[name="' . $trigger['#name'] . '"]', 'removeClass', array('error'));
  }
  $commands[] = ajax_command_replace('#ajax-messages', '<div id="ajax-messages">'.$messages.'</div>');
  return array('#type' => 'ajax', '#commands' => $commands);
}